{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/PlayList/PlayList.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","bind","assertThisInitialized","handleTermChange","onSearch","state","term","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","components_Track_Track","key","id","SearchResults","components_TrackList_TrackList","searchResults","PlayList","handleNameChange","onNameChange","playListName","playList","onSave","Spotify","getAccessToken","urlAccessToken","window","location","hash","match","urlExpiresIn","expiresIn","setTimeout","history","pushState","paramsObj","queryParamsString","client_id","response_type","redirect_uri","scope","keys","encodeURIComponent","join","concat","_search","asyncToGenerator","regenerator_default","mark","_callee","searchTerm","response","jsonResponse","wrap","_context","prev","next","fetch","headers","Authorization","sent","ok","json","items","artists","uri","abrupt","Error","t0","console","error","stop","_x","apply","arguments","savePlayList","playListTracks","length","then","userId","method","Content-Type","body","JSON","stringify","playListId","uris","playListTrack","catch","App","updatePlayListName","undefined","find","push","log","updatedPlayList","filter","_this2","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_PlayList_PlayList","Boolean","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17cbdc3e.chunk.js","sourcesContent":["// import {createQueryString} from `./util`;\nlet accessToken;\n\n// function for creating encoded query parameter string out of an object\nconst createQueryString = paramsObj =>\n  Object.keys(paramsObj)\n    .map(key => {\n      return encodeURIComponent(key) + '=' + encodeURIComponent(paramsObj[key]);\n    })\n    .join('&');\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n\n    // no accesstoken in memory, present in URL hash?\n    const urlAccessToken = window.location.hash.match(/access_token=([^&]*)/);\n    const urlExpiresIn = window.location.hash.match(/expires_in=([^&]*)/);\n\n    if (urlAccessToken && urlExpiresIn) {\n      // Reset access token in url after expiration\n      accessToken = urlAccessToken[1];\n      const expiresIn = urlExpiresIn[1];\n      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const url = 'https://accounts.spotify.com/authorize';\n      const queryParams = {\n        client_id: '5fd87456058f40e0af1dc9840fabb1d0',\n        response_type: 'token',\n        // be sure to add http://localhost:3000/ to redirect URIs\n        // for in the settings for the app on the Spotify dashboard\n        redirect_uri: 'http://localhost:3000/',\n        scope: 'playlist-modify-public',\n      };\n      const queryParamsString = createQueryString(queryParams);\n      window.location = `${url}?${queryParamsString}`;\n    }\n  },\n\n  async search(searchTerm) {\n    this.getAccessToken();\n    try {\n      const response = await fetch(\n        'https://api.spotify.com/v1/search?type=track&q=' + searchTerm,\n        {\n          headers: { Authorization: `Bearer ${accessToken}` },\n        }\n      );\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        const tracks = jsonResponse.tracks.items.map(track => ({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n        }));\n        return tracks;\n      }\n      throw new Error('Request failed!');\n    } catch (error) {\n      console.error(error);\n    }\n  },\n\n  savePlayList(playListName, playListTracks) {\n    if (playListName && playListTracks.length) {\n      this.getAccessToken();\n      // Get user\n      fetch('https://api.spotify.com/v1/me', {\n        headers: { Authorization: `Bearer ${accessToken}` },\n      })\n        .then(response => {\n          return response.json();\n        })\n        .then(jsonResponse => {\n          return jsonResponse.id;\n        })\n        // Create new playlist\n        .then(userId => {\n          fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n            method: 'POST',\n            headers: {\n              Authorization: `Bearer ${accessToken}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              name: playListName,\n            }),\n          })\n            .then(response => {\n              return response.json();\n            })\n            .then(jsonResponse => {\n              return jsonResponse.id;\n            })\n            // Add uris to playlist\n            .then(playListId => {\n              const uris = playListTracks.map(playListTrack => {\n                return `spotify:track:` + playListTrack.id;\n              });\n              fetch(\n                `https://api.spotify.com/v1/playlists/${playListId}/tracks`,\n                {\n                  headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                    'Content-Type': 'application/json',\n                  },\n                  method: 'POST',\n                  body: JSON.stringify({\n                    uris: uris,\n                  }),\n                }\n              );\n            });\n        })\n        // Will this catch errors for all fetch requests?\n        .catch(error => console.error('Error:', error));\n    }\n  },\n};\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search() {\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event) {\n    this.setState({ term: event.target.value });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input\n          placeholder=\"Enter A Song, Album, or Artist\"\n          onChange={this.handleTermChange}\n        />\n        <button onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    // console.table(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  renderAction() {\n    //const isRemoval = false;\n    if (this.props.isRemoval) {\n      return (\n        <button className=\"Track-action\" onClick={this.removeTrack}>\n          {' '}\n          -{' '}\n        </button>\n      );\n    } else {\n      return (\n        <button className=\"Track-action\" onClick={this.addTrack}>\n          +\n        </button>\n      );\n    }\n  }\n\n  addTrack(event) {\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(event) {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>\n            {this.props.track.artist} | {this.props.track.album}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from 'react';\nimport Track from '../Track/Track';\nimport './TrackList.css';\n\nclass TrackList extends React.Component {\n  constructor(props) {\n    super(props);\n    // console.table(props);\n  }\n\n  render() {\n    return (\n      <div className=\"TrackList\">\n        {this.props.tracks.map(track => (\n          <Track\n            key={track.id}\n            track={track}\n            onAdd={this.props.onAdd}\n            onRemove={this.props.onRemove}\n            isRemoval={this.props.isRemoval}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n  constructor(props) {\n    super(props);\n    // console.table(props);\n  }\n\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList\n          tracks={this.props.searchResults}\n          onAdd={this.props.onAdd}\n          isRemoval={false}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './PlayList.css';\n\nclass PlayList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"PlayList\">\n        <input\n          value={this.props.playListName}\n          onChange={this.handleNameChange}\n        />\n        <TrackList\n          tracks={this.props.playList}\n          onRemove={this.props.onRemove}\n          isRemoval={true}\n        />\n        <button className=\"PlayList-save\" onClick={this.props.onSave}>\n          SAVE TO SPOTIFY\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default PlayList;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport PlayList from '../PlayList/PlayList';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playListName: 'New PlayList',\n      playListTracks: [],\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlayListName = this.updatePlayListName.bind(this);\n    this.savePlayList = this.savePlayList.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if (\n      // track not in playlist?\n      this.state.playListTracks.find(\n        playListTrack => playListTrack.id === track.id\n      ) === undefined\n    ) {\n      this.setState(state => state.playListTracks.push(track));\n    } else {\n      console.log('already in list');\n    }\n  }\n\n  removeTrack(track) {\n    const updatedPlayList = this.state.playListTracks.filter(\n      playListTrack => playListTrack.id !== track.id\n    );\n    this.setState({\n      playListTracks: updatedPlayList,\n    });\n  }\n\n  updatePlayListName(playListName) {\n    this.setState({ playListName: playListName });\n  }\n\n  savePlayList() {\n    Spotify.savePlayList(this.state.playListName, this.state.playListTracks);\n\n    // @TODO Clearly I should await the outcome for .savePlayList, but using .then() doesn't work\n    this.setState({\n      playListName: 'New PlayList',\n      playListTracks: [],\n    });\n  }\n  search(searchTerm) {\n    Spotify.search(searchTerm).then(tracks =>\n      this.setState({ searchResults: tracks })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults\n              searchResults={this.state.searchResults}\n              onAdd={this.addTrack}\n            />\n            <PlayList\n              playList={this.state.playListTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlayListName}\n              onSave={this.savePlayList}\n              playListName={this.state.playListName}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}